#include <iostream>
#include "cryptlib.h"
#include "perform_aesgcm.h"

using namespace std;

int main(int argc, char *argv[])
{
	CryptoPP::byte key[32] = {
			0xf8, 0xd4, 0x76, 0xcf,
			0xd6, 0x46, 0xea, 0x6c,
			0x23, 0x84, 0xcb, 0x1c,
			0x27, 0xd6, 0x19, 0x5d,
			0xfe, 0xf1, 0xa9, 0xf3,
			0x7b, 0x9c, 0x8d, 0x21,
			0xa7, 0x9c, 0x21, 0xf8,
			0xcb, 0x90, 0xd2, 0x89
	};
	const int KEY_SIZE = 32;

	CryptoPP::byte iv[12] = {
			0xdb, 0xd1, 0xa3, 0x63,
			0x60, 0x24, 0xb7, 0xb4,
			0x02, 0xda, 0x7d, 0x6f
	};
	const int IV_SIZE = 12;

	CryptoPP::byte adata[20] = {
			0x7b, 0xd8, 0x59, 0xa2,
			0x47, 0x96, 0x1a, 0x21,
			0x82, 0x3b, 0x38, 0x0e,
			0x9f, 0xe8, 0xb6, 0x50,
			0x82, 0xba, 0x61, 0xd3
	};
	const int ADATA_SIZE = 20;

	CryptoPP::byte plaintext[20] = {
			0x90, 0xae, 0x61, 0xcf,
			0x7b, 0xae, 0xbd, 0x4c,
			0xad, 0xe4, 0x94, 0xc5,
			0x4a, 0x29, 0xae, 0x70,
			0x26, 0x9a, 0xec, 0x71
	};
	const int PLAINTEXT_SIZE = 20;

	CryptoPP::byte ciphertext[20] = {
			0xce, 0x20, 0x27, 0xb4,
			0x7a, 0x84, 0x32, 0x52,
			0x01, 0x34, 0x65, 0x83,
			0x4d, 0x75, 0xfd, 0x0f,
			0x07, 0x29, 0x75, 0x2e
	};

	const int TAG_SIZE = 16;

	CryptoPP::byte ciphertext_theoretical[20];

	perform_aesgcm(key,
					KEY_SIZE,
					iv,
					IV_SIZE,
					adata,
					ADATA_SIZE,
					plaintext,
					PLAINTEXT_SIZE,
					TAG_SIZE,
					ciphertext_theoretical
					);
	int deltas = 0;
	for(int i = 0; i < PLAINTEXT_SIZE; i++)
	{
		if(ciphertext_theoretical[i] != ciphertext[i])
		{
			deltas++;
		}
	}

	if(deltas > 0)
	{
		cout << "*******************************************" << endl;
		cout << "Test Failed with " << deltas << " errors!!!" << endl;
		cout << "*******************************************" << endl;
	}
	else
	{
		cout << "*******************************************" << endl;
		cout << "Test Passed!!!" << endl;
		cout << "*******************************************" << endl;
	}

	return 0;

}
